/*
accent-auth

Accent's authentication service

API version: 0.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"encoding/json"
)

// checks if the TokenData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenData{}

// TokenData struct for TokenData
type TokenData struct {
	// The list of allowed accesses for this token
	Acl []string `json:"acl,omitempty"`
	// The unique identifier retrieved from the backend
	AuthId    *string `json:"auth_id,omitempty"`
	ExpiresAt *string `json:"expires_at,omitempty"`
	IssuedAt  *string `json:"issued_at,omitempty"`
	// Information owned by accent-auth about this user
	Metadata     map[string]interface{} `json:"metadata,omitempty"`
	SessionUuid  *string                `json:"session_uuid,omitempty"`
	Token        *string                `json:"token,omitempty"`
	UtcExpiresAt *string                `json:"utc_expires_at,omitempty"`
	UtcIssuedAt  *string                `json:"utc_issued_at,omitempty"`
	// The UUID of the matching accent-confd user if there is one. This field can be null. This field should NOT be used anymore, the \"pbx_user_uuid\" in the metadata field is the prefered method to access this information.
	AccentUserUuid *string `json:"accent_user_uuid,omitempty"`
	AccentUuid     *string `json:"accent_uuid,omitempty"`
}

// NewTokenData instantiates a new TokenData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenData() *TokenData {
	this := TokenData{}
	return &this
}

// NewTokenDataWithDefaults instantiates a new TokenData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenDataWithDefaults() *TokenData {
	this := TokenData{}
	return &this
}

// GetAcl returns the Acl field value if set, zero value otherwise.
func (o *TokenData) GetAcl() []string {
	if o == nil || IsNil(o.Acl) {
		var ret []string
		return ret
	}
	return o.Acl
}

// GetAclOk returns a tuple with the Acl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenData) GetAclOk() ([]string, bool) {
	if o == nil || IsNil(o.Acl) {
		return nil, false
	}
	return o.Acl, true
}

// HasAcl returns a boolean if a field has been set.
func (o *TokenData) HasAcl() bool {
	if o != nil && !IsNil(o.Acl) {
		return true
	}

	return false
}

// SetAcl gets a reference to the given []string and assigns it to the Acl field.
func (o *TokenData) SetAcl(v []string) {
	o.Acl = v
}

// GetAuthId returns the AuthId field value if set, zero value otherwise.
func (o *TokenData) GetAuthId() string {
	if o == nil || IsNil(o.AuthId) {
		var ret string
		return ret
	}
	return *o.AuthId
}

// GetAuthIdOk returns a tuple with the AuthId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenData) GetAuthIdOk() (*string, bool) {
	if o == nil || IsNil(o.AuthId) {
		return nil, false
	}
	return o.AuthId, true
}

// HasAuthId returns a boolean if a field has been set.
func (o *TokenData) HasAuthId() bool {
	if o != nil && !IsNil(o.AuthId) {
		return true
	}

	return false
}

// SetAuthId gets a reference to the given string and assigns it to the AuthId field.
func (o *TokenData) SetAuthId(v string) {
	o.AuthId = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *TokenData) GetExpiresAt() string {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenData) GetExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *TokenData) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *TokenData) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetIssuedAt returns the IssuedAt field value if set, zero value otherwise.
func (o *TokenData) GetIssuedAt() string {
	if o == nil || IsNil(o.IssuedAt) {
		var ret string
		return ret
	}
	return *o.IssuedAt
}

// GetIssuedAtOk returns a tuple with the IssuedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenData) GetIssuedAtOk() (*string, bool) {
	if o == nil || IsNil(o.IssuedAt) {
		return nil, false
	}
	return o.IssuedAt, true
}

// HasIssuedAt returns a boolean if a field has been set.
func (o *TokenData) HasIssuedAt() bool {
	if o != nil && !IsNil(o.IssuedAt) {
		return true
	}

	return false
}

// SetIssuedAt gets a reference to the given string and assigns it to the IssuedAt field.
func (o *TokenData) SetIssuedAt(v string) {
	o.IssuedAt = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *TokenData) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenData) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *TokenData) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *TokenData) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetSessionUuid returns the SessionUuid field value if set, zero value otherwise.
func (o *TokenData) GetSessionUuid() string {
	if o == nil || IsNil(o.SessionUuid) {
		var ret string
		return ret
	}
	return *o.SessionUuid
}

// GetSessionUuidOk returns a tuple with the SessionUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenData) GetSessionUuidOk() (*string, bool) {
	if o == nil || IsNil(o.SessionUuid) {
		return nil, false
	}
	return o.SessionUuid, true
}

// HasSessionUuid returns a boolean if a field has been set.
func (o *TokenData) HasSessionUuid() bool {
	if o != nil && !IsNil(o.SessionUuid) {
		return true
	}

	return false
}

// SetSessionUuid gets a reference to the given string and assigns it to the SessionUuid field.
func (o *TokenData) SetSessionUuid(v string) {
	o.SessionUuid = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *TokenData) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenData) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *TokenData) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *TokenData) SetToken(v string) {
	o.Token = &v
}

// GetUtcExpiresAt returns the UtcExpiresAt field value if set, zero value otherwise.
func (o *TokenData) GetUtcExpiresAt() string {
	if o == nil || IsNil(o.UtcExpiresAt) {
		var ret string
		return ret
	}
	return *o.UtcExpiresAt
}

// GetUtcExpiresAtOk returns a tuple with the UtcExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenData) GetUtcExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.UtcExpiresAt) {
		return nil, false
	}
	return o.UtcExpiresAt, true
}

// HasUtcExpiresAt returns a boolean if a field has been set.
func (o *TokenData) HasUtcExpiresAt() bool {
	if o != nil && !IsNil(o.UtcExpiresAt) {
		return true
	}

	return false
}

// SetUtcExpiresAt gets a reference to the given string and assigns it to the UtcExpiresAt field.
func (o *TokenData) SetUtcExpiresAt(v string) {
	o.UtcExpiresAt = &v
}

// GetUtcIssuedAt returns the UtcIssuedAt field value if set, zero value otherwise.
func (o *TokenData) GetUtcIssuedAt() string {
	if o == nil || IsNil(o.UtcIssuedAt) {
		var ret string
		return ret
	}
	return *o.UtcIssuedAt
}

// GetUtcIssuedAtOk returns a tuple with the UtcIssuedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenData) GetUtcIssuedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UtcIssuedAt) {
		return nil, false
	}
	return o.UtcIssuedAt, true
}

// HasUtcIssuedAt returns a boolean if a field has been set.
func (o *TokenData) HasUtcIssuedAt() bool {
	if o != nil && !IsNil(o.UtcIssuedAt) {
		return true
	}

	return false
}

// SetUtcIssuedAt gets a reference to the given string and assigns it to the UtcIssuedAt field.
func (o *TokenData) SetUtcIssuedAt(v string) {
	o.UtcIssuedAt = &v
}

// GetAccentUserUuid returns the AccentUserUuid field value if set, zero value otherwise.
func (o *TokenData) GetAccentUserUuid() string {
	if o == nil || IsNil(o.AccentUserUuid) {
		var ret string
		return ret
	}
	return *o.AccentUserUuid
}

// GetAccentUserUuidOk returns a tuple with the AccentUserUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenData) GetAccentUserUuidOk() (*string, bool) {
	if o == nil || IsNil(o.AccentUserUuid) {
		return nil, false
	}
	return o.AccentUserUuid, true
}

// HasAccentUserUuid returns a boolean if a field has been set.
func (o *TokenData) HasAccentUserUuid() bool {
	if o != nil && !IsNil(o.AccentUserUuid) {
		return true
	}

	return false
}

// SetAccentUserUuid gets a reference to the given string and assigns it to the AccentUserUuid field.
func (o *TokenData) SetAccentUserUuid(v string) {
	o.AccentUserUuid = &v
}

// GetAccentUuid returns the AccentUuid field value if set, zero value otherwise.
func (o *TokenData) GetAccentUuid() string {
	if o == nil || IsNil(o.AccentUuid) {
		var ret string
		return ret
	}
	return *o.AccentUuid
}

// GetAccentUuidOk returns a tuple with the AccentUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenData) GetAccentUuidOk() (*string, bool) {
	if o == nil || IsNil(o.AccentUuid) {
		return nil, false
	}
	return o.AccentUuid, true
}

// HasAccentUuid returns a boolean if a field has been set.
func (o *TokenData) HasAccentUuid() bool {
	if o != nil && !IsNil(o.AccentUuid) {
		return true
	}

	return false
}

// SetAccentUuid gets a reference to the given string and assigns it to the AccentUuid field.
func (o *TokenData) SetAccentUuid(v string) {
	o.AccentUuid = &v
}

func (o TokenData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Acl) {
		toSerialize["acl"] = o.Acl
	}
	if !IsNil(o.AuthId) {
		toSerialize["auth_id"] = o.AuthId
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !IsNil(o.IssuedAt) {
		toSerialize["issued_at"] = o.IssuedAt
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.SessionUuid) {
		toSerialize["session_uuid"] = o.SessionUuid
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.UtcExpiresAt) {
		toSerialize["utc_expires_at"] = o.UtcExpiresAt
	}
	if !IsNil(o.UtcIssuedAt) {
		toSerialize["utc_issued_at"] = o.UtcIssuedAt
	}
	if !IsNil(o.AccentUserUuid) {
		toSerialize["accent_user_uuid"] = o.AccentUserUuid
	}
	if !IsNil(o.AccentUuid) {
		toSerialize["accent_uuid"] = o.AccentUuid
	}
	return toSerialize, nil
}

type NullableTokenData struct {
	value *TokenData
	isSet bool
}

func (v NullableTokenData) Get() *TokenData {
	return v.value
}

func (v *NullableTokenData) Set(val *TokenData) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenData) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenData(val *TokenData) *NullableTokenData {
	return &NullableTokenData{value: val, isSet: true}
}

func (v NullableTokenData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

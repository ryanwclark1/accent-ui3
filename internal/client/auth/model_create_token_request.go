/*
accent-auth

Accent's authentication service

API version: 0.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"encoding/json"
)

// checks if the CreateTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTokenRequest{}

// CreateTokenRequest struct for CreateTokenRequest
type CreateTokenRequest struct {
	// The `access_type` indicates whether your application can refresh the tokens when the user is not present at the browser. Valid parameter values are *online*, which is the default value, and *offline* Only one refresh token will be created for a given user with a given `client_id`. The old refresh for `client_id` will be revoken when creating a new one. The *client_id* field is required when using the `access_type` *offline*
	AccessType *string `json:"access_type,omitempty"`
	Backend    *string `json:"backend,omitempty"`
	// The `client_id` is used in conjunction with the `access_type` *offline* to known for which application a refresh token has been emitted. *Required when using `access_type: offline`*
	ClientId *string `json:"client_id,omitempty"`
	// The `domain_name` must match a tenant's domain_name entry to find the appropriate ldap configuration.
	DomainName *string `json:"domain_name,omitempty"`
	// Expiration time in seconds.
	Expiration *int32 `json:"expiration,omitempty"`
	// The `refresh_token` can be used to get a new access token without using the username/password. This is useful for client application that should not store the username and password once the user has logged in a first time.
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// NewCreateTokenRequest instantiates a new CreateTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTokenRequest() *CreateTokenRequest {
	this := CreateTokenRequest{}
	var accessType string = "online"
	this.AccessType = &accessType
	var backend string = "accent_user"
	this.Backend = &backend
	return &this
}

// NewCreateTokenRequestWithDefaults instantiates a new CreateTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTokenRequestWithDefaults() *CreateTokenRequest {
	this := CreateTokenRequest{}
	var accessType string = "online"
	this.AccessType = &accessType
	var backend string = "accent_user"
	this.Backend = &backend
	return &this
}

// GetAccessType returns the AccessType field value if set, zero value otherwise.
func (o *CreateTokenRequest) GetAccessType() string {
	if o == nil || IsNil(o.AccessType) {
		var ret string
		return ret
	}
	return *o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTokenRequest) GetAccessTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AccessType) {
		return nil, false
	}
	return o.AccessType, true
}

// HasAccessType returns a boolean if a field has been set.
func (o *CreateTokenRequest) HasAccessType() bool {
	if o != nil && !IsNil(o.AccessType) {
		return true
	}

	return false
}

// SetAccessType gets a reference to the given string and assigns it to the AccessType field.
func (o *CreateTokenRequest) SetAccessType(v string) {
	o.AccessType = &v
}

// GetBackend returns the Backend field value if set, zero value otherwise.
func (o *CreateTokenRequest) GetBackend() string {
	if o == nil || IsNil(o.Backend) {
		var ret string
		return ret
	}
	return *o.Backend
}

// GetBackendOk returns a tuple with the Backend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTokenRequest) GetBackendOk() (*string, bool) {
	if o == nil || IsNil(o.Backend) {
		return nil, false
	}
	return o.Backend, true
}

// HasBackend returns a boolean if a field has been set.
func (o *CreateTokenRequest) HasBackend() bool {
	if o != nil && !IsNil(o.Backend) {
		return true
	}

	return false
}

// SetBackend gets a reference to the given string and assigns it to the Backend field.
func (o *CreateTokenRequest) SetBackend(v string) {
	o.Backend = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *CreateTokenRequest) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTokenRequest) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *CreateTokenRequest) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *CreateTokenRequest) SetClientId(v string) {
	o.ClientId = &v
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *CreateTokenRequest) GetDomainName() string {
	if o == nil || IsNil(o.DomainName) {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTokenRequest) GetDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainName) {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *CreateTokenRequest) HasDomainName() bool {
	if o != nil && !IsNil(o.DomainName) {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *CreateTokenRequest) SetDomainName(v string) {
	o.DomainName = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *CreateTokenRequest) GetExpiration() int32 {
	if o == nil || IsNil(o.Expiration) {
		var ret int32
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTokenRequest) GetExpirationOk() (*int32, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *CreateTokenRequest) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given int32 and assigns it to the Expiration field.
func (o *CreateTokenRequest) SetExpiration(v int32) {
	o.Expiration = &v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise.
func (o *CreateTokenRequest) GetRefreshToken() string {
	if o == nil || IsNil(o.RefreshToken) {
		var ret string
		return ret
	}
	return *o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTokenRequest) GetRefreshTokenOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshToken) {
		return nil, false
	}
	return o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *CreateTokenRequest) HasRefreshToken() bool {
	if o != nil && !IsNil(o.RefreshToken) {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given string and assigns it to the RefreshToken field.
func (o *CreateTokenRequest) SetRefreshToken(v string) {
	o.RefreshToken = &v
}

func (o CreateTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessType) {
		toSerialize["access_type"] = o.AccessType
	}
	if !IsNil(o.Backend) {
		toSerialize["backend"] = o.Backend
	}
	if !IsNil(o.ClientId) {
		toSerialize["client_id"] = o.ClientId
	}
	if !IsNil(o.DomainName) {
		toSerialize["domain_name"] = o.DomainName
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.RefreshToken) {
		toSerialize["refresh_token"] = o.RefreshToken
	}
	return toSerialize, nil
}

type NullableCreateTokenRequest struct {
	value *CreateTokenRequest
	isSet bool
}

func (v NullableCreateTokenRequest) Get() *CreateTokenRequest {
	return v.value
}

func (v *NullableCreateTokenRequest) Set(val *CreateTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTokenRequest(val *CreateTokenRequest) *NullableCreateTokenRequest {
	return &NullableCreateTokenRequest{value: val, isSet: true}
}

func (v NullableCreateTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

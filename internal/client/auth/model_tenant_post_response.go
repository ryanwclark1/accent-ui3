/*
accent-auth

Accent's authentication service

API version: 0.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"encoding/json"
)

// checks if the TenantPostResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantPostResponse{}

// TenantPostResponse struct for TenantPostResponse
type TenantPostResponse struct {
	Name       *string `json:"name,omitempty"`
	ParentUuid *string `json:"parent_uuid,omitempty"`
	Uuid       *string `json:"uuid,omitempty"`
}

// NewTenantPostResponse instantiates a new TenantPostResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantPostResponse() *TenantPostResponse {
	this := TenantPostResponse{}
	return &this
}

// NewTenantPostResponseWithDefaults instantiates a new TenantPostResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantPostResponseWithDefaults() *TenantPostResponse {
	this := TenantPostResponse{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TenantPostResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantPostResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TenantPostResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TenantPostResponse) SetName(v string) {
	o.Name = &v
}

// GetParentUuid returns the ParentUuid field value if set, zero value otherwise.
func (o *TenantPostResponse) GetParentUuid() string {
	if o == nil || IsNil(o.ParentUuid) {
		var ret string
		return ret
	}
	return *o.ParentUuid
}

// GetParentUuidOk returns a tuple with the ParentUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantPostResponse) GetParentUuidOk() (*string, bool) {
	if o == nil || IsNil(o.ParentUuid) {
		return nil, false
	}
	return o.ParentUuid, true
}

// HasParentUuid returns a boolean if a field has been set.
func (o *TenantPostResponse) HasParentUuid() bool {
	if o != nil && !IsNil(o.ParentUuid) {
		return true
	}

	return false
}

// SetParentUuid gets a reference to the given string and assigns it to the ParentUuid field.
func (o *TenantPostResponse) SetParentUuid(v string) {
	o.ParentUuid = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *TenantPostResponse) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantPostResponse) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *TenantPostResponse) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *TenantPostResponse) SetUuid(v string) {
	o.Uuid = &v
}

func (o TenantPostResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantPostResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ParentUuid) {
		toSerialize["parent_uuid"] = o.ParentUuid
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableTenantPostResponse struct {
	value *TenantPostResponse
	isSet bool
}

func (v NullableTenantPostResponse) Get() *TenantPostResponse {
	return v.value
}

func (v *NullableTenantPostResponse) Set(val *TenantPostResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantPostResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantPostResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantPostResponse(val *TenantPostResponse) *NullableTenantPostResponse {
	return &NullableTenantPostResponse{value: val, isSet: true}
}

func (v NullableTenantPostResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantPostResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
accent-auth

Testing GroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package auth

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/auth"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_auth_GroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GroupsAPIService AddGroupPolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupUuid string
		var policyUuid string

		httpRes, err := apiClient.GroupsAPI.AddGroupPolicy(context.Background(), groupUuid, policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService AddGroupUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupUuid string
		var userUuid string

		httpRes, err := apiClient.GroupsAPI.AddGroupUser(context.Background(), groupUuid, userUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService DeleteGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupUuid string

		httpRes, err := apiClient.GroupsAPI.DeleteGroup(context.Background(), groupUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService DeleteGroupPolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupUuid string
		var policyUuid string

		httpRes, err := apiClient.GroupsAPI.DeleteGroupPolicy(context.Background(), groupUuid, policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService EditGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupUuid string

		resp, httpRes, err := apiClient.GroupsAPI.EditGroup(context.Background(), groupUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService GetGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupUuid string

		resp, httpRes, err := apiClient.GroupsAPI.GetGroup(context.Background(), groupUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService GetGroupPolicies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupUuid string

		resp, httpRes, err := apiClient.GroupsAPI.GetGroupPolicies(context.Background(), groupUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService GetGroupUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupUuid string

		resp, httpRes, err := apiClient.GroupsAPI.GetGroupUsers(context.Background(), groupUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService RemoveGroupUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupUuid string
		var userUuid string

		httpRes, err := apiClient.GroupsAPI.RemoveGroupUser(context.Background(), groupUuid, userUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

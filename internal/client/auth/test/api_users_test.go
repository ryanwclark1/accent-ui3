/*
accent-auth

Testing UsersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package auth

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/auth"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_auth_UsersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UsersAPIService AddGroupUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupUuid string
		var userUuid string

		httpRes, err := apiClient.UsersAPI.AddGroupUser(context.Background(), groupUuid, userUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AddUserPolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var policyUuid string
		var userUuid string

		httpRes, err := apiClient.UsersAPI.AddUserPolicy(context.Background(), policyUuid, userUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ChangeUserPassword", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string

		httpRes, err := apiClient.UsersAPI.ChangeUserPassword(context.Background(), userUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService CreateUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.CreateUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService DeleteRefreshTokens", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuidOrMe string
		var clientId string

		httpRes, err := apiClient.UsersAPI.DeleteRefreshTokens(context.Background(), userUuidOrMe, clientId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService DeleteUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string

		httpRes, err := apiClient.UsersAPI.DeleteUser(context.Background(), userUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService DeleteUserPolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var policyUuid string
		var userUuid string

		httpRes, err := apiClient.UsersAPI.DeleteUserPolicy(context.Background(), policyUuid, userUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetNewEmailConfirmation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string
		var emailUuid string

		httpRes, err := apiClient.UsersAPI.GetNewEmailConfirmation(context.Background(), userUuid, emailUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string

		resp, httpRes, err := apiClient.UsersAPI.GetUser(context.Background(), userUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserExternalAuth", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string

		resp, httpRes, err := apiClient.UsersAPI.GetUserExternalAuth(context.Background(), userUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string

		resp, httpRes, err := apiClient.UsersAPI.GetUserGroups(context.Background(), userUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserPolicies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string

		resp, httpRes, err := apiClient.UsersAPI.GetUserPolicies(context.Background(), userUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserSessions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string

		resp, httpRes, err := apiClient.UsersAPI.GetUserSessions(context.Background(), userUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserTokens", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuidOrMe string

		resp, httpRes, err := apiClient.UsersAPI.GetUserTokens(context.Background(), userUuidOrMe).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.GetUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService RegisterUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.RegisterUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService RemoveGroupUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupUuid string
		var userUuid string

		httpRes, err := apiClient.UsersAPI.RemoveGroupUser(context.Background(), groupUuid, userUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ResetPassword", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.UsersAPI.ResetPassword(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ResetPasswordChange", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.UsersAPI.ResetPasswordChange(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdateAllUserEmails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string

		httpRes, err := apiClient.UsersAPI.UpdateAllUserEmails(context.Background(), userUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdateUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string

		resp, httpRes, err := apiClient.UsersAPI.UpdateUser(context.Background(), userUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdateUserEmails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string

		httpRes, err := apiClient.UsersAPI.UpdateUserEmails(context.Background(), userUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserDeleteSession", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string
		var sessionUuid string

		httpRes, err := apiClient.UsersAPI.UserDeleteSession(context.Background(), userUuid, sessionUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

/*
accent-auth

Accent's authentication service

API version: 0.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"encoding/json"
)

// checks if the UserPostResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPostResponse{}

// UserPostResponse struct for UserPostResponse
type UserPostResponse struct {
	Emails   []UserEmail `json:"emails,omitempty"`
	Purpose  *string     `json:"purpose,omitempty"`
	Username *string     `json:"username,omitempty"`
	Uuid     *string     `json:"uuid,omitempty"`
}

// NewUserPostResponse instantiates a new UserPostResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPostResponse() *UserPostResponse {
	this := UserPostResponse{}
	return &this
}

// NewUserPostResponseWithDefaults instantiates a new UserPostResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPostResponseWithDefaults() *UserPostResponse {
	this := UserPostResponse{}
	return &this
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *UserPostResponse) GetEmails() []UserEmail {
	if o == nil || IsNil(o.Emails) {
		var ret []UserEmail
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostResponse) GetEmailsOk() ([]UserEmail, bool) {
	if o == nil || IsNil(o.Emails) {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *UserPostResponse) HasEmails() bool {
	if o != nil && !IsNil(o.Emails) {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []UserEmail and assigns it to the Emails field.
func (o *UserPostResponse) SetEmails(v []UserEmail) {
	o.Emails = v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *UserPostResponse) GetPurpose() string {
	if o == nil || IsNil(o.Purpose) {
		var ret string
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostResponse) GetPurposeOk() (*string, bool) {
	if o == nil || IsNil(o.Purpose) {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *UserPostResponse) HasPurpose() bool {
	if o != nil && !IsNil(o.Purpose) {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given string and assigns it to the Purpose field.
func (o *UserPostResponse) SetPurpose(v string) {
	o.Purpose = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserPostResponse) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostResponse) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserPostResponse) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserPostResponse) SetUsername(v string) {
	o.Username = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *UserPostResponse) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostResponse) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *UserPostResponse) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *UserPostResponse) SetUuid(v string) {
	o.Uuid = &v
}

func (o UserPostResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPostResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Emails) {
		toSerialize["emails"] = o.Emails
	}
	if !IsNil(o.Purpose) {
		toSerialize["purpose"] = o.Purpose
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableUserPostResponse struct {
	value *UserPostResponse
	isSet bool
}

func (v NullableUserPostResponse) Get() *UserPostResponse {
	return v.value
}

func (v *NullableUserPostResponse) Set(val *UserPostResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPostResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPostResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPostResponse(val *UserPostResponse) *NullableUserPostResponse {
	return &NullableUserPostResponse{value: val, isSet: true}
}

func (v NullableUserPostResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPostResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
accent-auth

Accent's authentication service

API version: 0.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ScopeCheckRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopeCheckRequest{}

// ScopeCheckRequest struct for ScopeCheckRequest
type ScopeCheckRequest struct {
	// Scopes to check against
	Scopes []string `json:"scopes"`
	// If provided, also checks the token against this tenant
	TenantUuid *string `json:"tenant_uuid,omitempty"`
}

type _ScopeCheckRequest ScopeCheckRequest

// NewScopeCheckRequest instantiates a new ScopeCheckRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopeCheckRequest(scopes []string) *ScopeCheckRequest {
	this := ScopeCheckRequest{}
	this.Scopes = scopes
	return &this
}

// NewScopeCheckRequestWithDefaults instantiates a new ScopeCheckRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeCheckRequestWithDefaults() *ScopeCheckRequest {
	this := ScopeCheckRequest{}
	return &this
}

// GetScopes returns the Scopes field value
func (o *ScopeCheckRequest) GetScopes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *ScopeCheckRequest) GetScopesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *ScopeCheckRequest) SetScopes(v []string) {
	o.Scopes = v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *ScopeCheckRequest) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeCheckRequest) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *ScopeCheckRequest) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *ScopeCheckRequest) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

func (o ScopeCheckRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopeCheckRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scopes"] = o.Scopes
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	return toSerialize, nil
}

func (o *ScopeCheckRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scopes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScopeCheckRequest := _ScopeCheckRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScopeCheckRequest)

	if err != nil {
		return err
	}

	*o = ScopeCheckRequest(varScopeCheckRequest)

	return err
}

type NullableScopeCheckRequest struct {
	value *ScopeCheckRequest
	isSet bool
}

func (v NullableScopeCheckRequest) Get() *ScopeCheckRequest {
	return v.value
}

func (v *NullableScopeCheckRequest) Set(val *ScopeCheckRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeCheckRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeCheckRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeCheckRequest(val *ScopeCheckRequest) *NullableScopeCheckRequest {
	return &NullableScopeCheckRequest{value: val, isSet: true}
}

func (v NullableScopeCheckRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeCheckRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
accent-auth

Accent's authentication service

API version: 0.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LDAPBackendConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LDAPBackendConfig{}

// LDAPBackendConfig struct for LDAPBackendConfig
type LDAPBackendConfig struct {
	// The DN to use to bind the `accent-auth` service to the LDAP server. If unspecified, `accent-auth` will not bind with a service user but only with the final user account. For this to work though, your users will need to have the right to read their own information, particularly their email address.
	BindDn *string `json:"bind_dn,omitempty"`
	// The host or IP address of the LDAP server.
	Host string `json:"host"`
	// The port on which to connect to the LDAP server.
	Port int32 `json:"port"`
	// The layer of security to use for the connection.
	ProtocolSecurity *string `json:"protocol_security,omitempty"`
	// LDAP protocol version to use
	ProtocolVersion *int32 `json:"protocol_version,omitempty"`
	// Filters for finding a user DN given a service bind is used. Available variables are `username`, `user_login_attribute` and `user_email_attribute`. These variables come from the fields of the same name from the API.
	SearchFilters *string `json:"search_filters,omitempty"`
	TenantUuid    *string `json:"tenant_uuid,omitempty"`
	// The base DN in which users are located
	UserBaseDn string `json:"user_base_dn"`
	// The attribute of the email address in the LDAP schema.
	UserEmailAttribute string `json:"user_email_attribute"`
	// The attribute that identifies users. It will be prepended to the `user_base_dn`.
	UserLoginAttribute string `json:"user_login_attribute"`
}

type _LDAPBackendConfig LDAPBackendConfig

// NewLDAPBackendConfig instantiates a new LDAPBackendConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLDAPBackendConfig(host string, port int32, userBaseDn string, userEmailAttribute string, userLoginAttribute string) *LDAPBackendConfig {
	this := LDAPBackendConfig{}
	this.Host = host
	this.Port = port
	var protocolSecurity string = ""
	this.ProtocolSecurity = &protocolSecurity
	this.UserBaseDn = userBaseDn
	this.UserEmailAttribute = userEmailAttribute
	this.UserLoginAttribute = userLoginAttribute
	return &this
}

// NewLDAPBackendConfigWithDefaults instantiates a new LDAPBackendConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLDAPBackendConfigWithDefaults() *LDAPBackendConfig {
	this := LDAPBackendConfig{}
	var protocolSecurity string = ""
	this.ProtocolSecurity = &protocolSecurity
	return &this
}

// GetBindDn returns the BindDn field value if set, zero value otherwise.
func (o *LDAPBackendConfig) GetBindDn() string {
	if o == nil || IsNil(o.BindDn) {
		var ret string
		return ret
	}
	return *o.BindDn
}

// GetBindDnOk returns a tuple with the BindDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPBackendConfig) GetBindDnOk() (*string, bool) {
	if o == nil || IsNil(o.BindDn) {
		return nil, false
	}
	return o.BindDn, true
}

// HasBindDn returns a boolean if a field has been set.
func (o *LDAPBackendConfig) HasBindDn() bool {
	if o != nil && !IsNil(o.BindDn) {
		return true
	}

	return false
}

// SetBindDn gets a reference to the given string and assigns it to the BindDn field.
func (o *LDAPBackendConfig) SetBindDn(v string) {
	o.BindDn = &v
}

// GetHost returns the Host field value
func (o *LDAPBackendConfig) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *LDAPBackendConfig) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *LDAPBackendConfig) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *LDAPBackendConfig) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *LDAPBackendConfig) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *LDAPBackendConfig) SetPort(v int32) {
	o.Port = v
}

// GetProtocolSecurity returns the ProtocolSecurity field value if set, zero value otherwise.
func (o *LDAPBackendConfig) GetProtocolSecurity() string {
	if o == nil || IsNil(o.ProtocolSecurity) {
		var ret string
		return ret
	}
	return *o.ProtocolSecurity
}

// GetProtocolSecurityOk returns a tuple with the ProtocolSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPBackendConfig) GetProtocolSecurityOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolSecurity) {
		return nil, false
	}
	return o.ProtocolSecurity, true
}

// HasProtocolSecurity returns a boolean if a field has been set.
func (o *LDAPBackendConfig) HasProtocolSecurity() bool {
	if o != nil && !IsNil(o.ProtocolSecurity) {
		return true
	}

	return false
}

// SetProtocolSecurity gets a reference to the given string and assigns it to the ProtocolSecurity field.
func (o *LDAPBackendConfig) SetProtocolSecurity(v string) {
	o.ProtocolSecurity = &v
}

// GetProtocolVersion returns the ProtocolVersion field value if set, zero value otherwise.
func (o *LDAPBackendConfig) GetProtocolVersion() int32 {
	if o == nil || IsNil(o.ProtocolVersion) {
		var ret int32
		return ret
	}
	return *o.ProtocolVersion
}

// GetProtocolVersionOk returns a tuple with the ProtocolVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPBackendConfig) GetProtocolVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.ProtocolVersion) {
		return nil, false
	}
	return o.ProtocolVersion, true
}

// HasProtocolVersion returns a boolean if a field has been set.
func (o *LDAPBackendConfig) HasProtocolVersion() bool {
	if o != nil && !IsNil(o.ProtocolVersion) {
		return true
	}

	return false
}

// SetProtocolVersion gets a reference to the given int32 and assigns it to the ProtocolVersion field.
func (o *LDAPBackendConfig) SetProtocolVersion(v int32) {
	o.ProtocolVersion = &v
}

// GetSearchFilters returns the SearchFilters field value if set, zero value otherwise.
func (o *LDAPBackendConfig) GetSearchFilters() string {
	if o == nil || IsNil(o.SearchFilters) {
		var ret string
		return ret
	}
	return *o.SearchFilters
}

// GetSearchFiltersOk returns a tuple with the SearchFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPBackendConfig) GetSearchFiltersOk() (*string, bool) {
	if o == nil || IsNil(o.SearchFilters) {
		return nil, false
	}
	return o.SearchFilters, true
}

// HasSearchFilters returns a boolean if a field has been set.
func (o *LDAPBackendConfig) HasSearchFilters() bool {
	if o != nil && !IsNil(o.SearchFilters) {
		return true
	}

	return false
}

// SetSearchFilters gets a reference to the given string and assigns it to the SearchFilters field.
func (o *LDAPBackendConfig) SetSearchFilters(v string) {
	o.SearchFilters = &v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *LDAPBackendConfig) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPBackendConfig) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *LDAPBackendConfig) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *LDAPBackendConfig) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

// GetUserBaseDn returns the UserBaseDn field value
func (o *LDAPBackendConfig) GetUserBaseDn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserBaseDn
}

// GetUserBaseDnOk returns a tuple with the UserBaseDn field value
// and a boolean to check if the value has been set.
func (o *LDAPBackendConfig) GetUserBaseDnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserBaseDn, true
}

// SetUserBaseDn sets field value
func (o *LDAPBackendConfig) SetUserBaseDn(v string) {
	o.UserBaseDn = v
}

// GetUserEmailAttribute returns the UserEmailAttribute field value
func (o *LDAPBackendConfig) GetUserEmailAttribute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserEmailAttribute
}

// GetUserEmailAttributeOk returns a tuple with the UserEmailAttribute field value
// and a boolean to check if the value has been set.
func (o *LDAPBackendConfig) GetUserEmailAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserEmailAttribute, true
}

// SetUserEmailAttribute sets field value
func (o *LDAPBackendConfig) SetUserEmailAttribute(v string) {
	o.UserEmailAttribute = v
}

// GetUserLoginAttribute returns the UserLoginAttribute field value
func (o *LDAPBackendConfig) GetUserLoginAttribute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserLoginAttribute
}

// GetUserLoginAttributeOk returns a tuple with the UserLoginAttribute field value
// and a boolean to check if the value has been set.
func (o *LDAPBackendConfig) GetUserLoginAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserLoginAttribute, true
}

// SetUserLoginAttribute sets field value
func (o *LDAPBackendConfig) SetUserLoginAttribute(v string) {
	o.UserLoginAttribute = v
}

func (o LDAPBackendConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LDAPBackendConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BindDn) {
		toSerialize["bind_dn"] = o.BindDn
	}
	toSerialize["host"] = o.Host
	toSerialize["port"] = o.Port
	if !IsNil(o.ProtocolSecurity) {
		toSerialize["protocol_security"] = o.ProtocolSecurity
	}
	if !IsNil(o.ProtocolVersion) {
		toSerialize["protocol_version"] = o.ProtocolVersion
	}
	if !IsNil(o.SearchFilters) {
		toSerialize["search_filters"] = o.SearchFilters
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	toSerialize["user_base_dn"] = o.UserBaseDn
	toSerialize["user_email_attribute"] = o.UserEmailAttribute
	toSerialize["user_login_attribute"] = o.UserLoginAttribute
	return toSerialize, nil
}

func (o *LDAPBackendConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host",
		"port",
		"user_base_dn",
		"user_email_attribute",
		"user_login_attribute",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLDAPBackendConfig := _LDAPBackendConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLDAPBackendConfig)

	if err != nil {
		return err
	}

	*o = LDAPBackendConfig(varLDAPBackendConfig)

	return err
}

type NullableLDAPBackendConfig struct {
	value *LDAPBackendConfig
	isSet bool
}

func (v NullableLDAPBackendConfig) Get() *LDAPBackendConfig {
	return v.value
}

func (v *NullableLDAPBackendConfig) Set(val *LDAPBackendConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableLDAPBackendConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableLDAPBackendConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLDAPBackendConfig(val *LDAPBackendConfig) *NullableLDAPBackendConfig {
	return &NullableLDAPBackendConfig{value: val, isSet: true}
}

func (v NullableLDAPBackendConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLDAPBackendConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

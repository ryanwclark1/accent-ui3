/*
accent-auth

Accent's authentication service

API version: 0.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AdminUserEmailListEmailsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminUserEmailListEmailsInner{}

// AdminUserEmailListEmailsInner struct for AdminUserEmailListEmailsInner
type AdminUserEmailListEmailsInner struct {
	Address   *string `json:"address,omitempty"`
	Confirmed *bool   `json:"confirmed,omitempty"`
	Main      bool    `json:"main"`
}

type _AdminUserEmailListEmailsInner AdminUserEmailListEmailsInner

// NewAdminUserEmailListEmailsInner instantiates a new AdminUserEmailListEmailsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminUserEmailListEmailsInner(main bool) *AdminUserEmailListEmailsInner {
	this := AdminUserEmailListEmailsInner{}
	this.Main = main
	return &this
}

// NewAdminUserEmailListEmailsInnerWithDefaults instantiates a new AdminUserEmailListEmailsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminUserEmailListEmailsInnerWithDefaults() *AdminUserEmailListEmailsInner {
	this := AdminUserEmailListEmailsInner{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *AdminUserEmailListEmailsInner) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminUserEmailListEmailsInner) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *AdminUserEmailListEmailsInner) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *AdminUserEmailListEmailsInner) SetAddress(v string) {
	o.Address = &v
}

// GetConfirmed returns the Confirmed field value if set, zero value otherwise.
func (o *AdminUserEmailListEmailsInner) GetConfirmed() bool {
	if o == nil || IsNil(o.Confirmed) {
		var ret bool
		return ret
	}
	return *o.Confirmed
}

// GetConfirmedOk returns a tuple with the Confirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminUserEmailListEmailsInner) GetConfirmedOk() (*bool, bool) {
	if o == nil || IsNil(o.Confirmed) {
		return nil, false
	}
	return o.Confirmed, true
}

// HasConfirmed returns a boolean if a field has been set.
func (o *AdminUserEmailListEmailsInner) HasConfirmed() bool {
	if o != nil && !IsNil(o.Confirmed) {
		return true
	}

	return false
}

// SetConfirmed gets a reference to the given bool and assigns it to the Confirmed field.
func (o *AdminUserEmailListEmailsInner) SetConfirmed(v bool) {
	o.Confirmed = &v
}

// GetMain returns the Main field value
func (o *AdminUserEmailListEmailsInner) GetMain() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Main
}

// GetMainOk returns a tuple with the Main field value
// and a boolean to check if the value has been set.
func (o *AdminUserEmailListEmailsInner) GetMainOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Main, true
}

// SetMain sets field value
func (o *AdminUserEmailListEmailsInner) SetMain(v bool) {
	o.Main = v
}

func (o AdminUserEmailListEmailsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminUserEmailListEmailsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Confirmed) {
		toSerialize["confirmed"] = o.Confirmed
	}
	toSerialize["main"] = o.Main
	return toSerialize, nil
}

func (o *AdminUserEmailListEmailsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"main",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdminUserEmailListEmailsInner := _AdminUserEmailListEmailsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAdminUserEmailListEmailsInner)

	if err != nil {
		return err
	}

	*o = AdminUserEmailListEmailsInner(varAdminUserEmailListEmailsInner)

	return err
}

type NullableAdminUserEmailListEmailsInner struct {
	value *AdminUserEmailListEmailsInner
	isSet bool
}

func (v NullableAdminUserEmailListEmailsInner) Get() *AdminUserEmailListEmailsInner {
	return v.value
}

func (v *NullableAdminUserEmailListEmailsInner) Set(val *AdminUserEmailListEmailsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminUserEmailListEmailsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminUserEmailListEmailsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminUserEmailListEmailsInner(val *AdminUserEmailListEmailsInner) *NullableAdminUserEmailListEmailsInner {
	return &NullableAdminUserEmailListEmailsInner{value: val, isSet: true}
}

func (v NullableAdminUserEmailListEmailsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminUserEmailListEmailsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

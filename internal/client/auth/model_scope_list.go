/*
accent-auth

Accent's authentication service

API version: 0.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"encoding/json"
)

// checks if the ScopeList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopeList{}

// ScopeList struct for ScopeList
type ScopeList struct {
	// the scopes and their check result
	Scopes []map[string]interface{} `json:"scopes,omitempty"`
}

// NewScopeList instantiates a new ScopeList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopeList() *ScopeList {
	this := ScopeList{}
	return &this
}

// NewScopeListWithDefaults instantiates a new ScopeList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeListWithDefaults() *ScopeList {
	this := ScopeList{}
	return &this
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *ScopeList) GetScopes() []map[string]interface{} {
	if o == nil || IsNil(o.Scopes) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeList) GetScopesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *ScopeList) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []map[string]interface{} and assigns it to the Scopes field.
func (o *ScopeList) SetScopes(v []map[string]interface{}) {
	o.Scopes = v
}

func (o ScopeList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopeList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

type NullableScopeList struct {
	value *ScopeList
	isSet bool
}

func (v NullableScopeList) Get() *ScopeList {
	return v.value
}

func (v *NullableScopeList) Set(val *ScopeList) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeList) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeList(val *ScopeList) *NullableScopeList {
	return &NullableScopeList{value: val, isSet: true}
}

func (v NullableScopeList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

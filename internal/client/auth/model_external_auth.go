/*
accent-auth

Accent's authentication service

API version: 0.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"encoding/json"
)

// checks if the ExternalAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalAuth{}

// ExternalAuth struct for ExternalAuth
type ExternalAuth struct {
	Data       map[string]interface{} `json:"data,omitempty"`
	Enabled    *bool                  `json:"enabled,omitempty"`
	PluginInfo map[string]interface{} `json:"plugin_info,omitempty"`
	// The external auth type name
	Type *string `json:"type,omitempty"`
}

// NewExternalAuth instantiates a new ExternalAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalAuth() *ExternalAuth {
	this := ExternalAuth{}
	return &this
}

// NewExternalAuthWithDefaults instantiates a new ExternalAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalAuthWithDefaults() *ExternalAuth {
	this := ExternalAuth{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ExternalAuth) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalAuth) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ExternalAuth) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *ExternalAuth) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ExternalAuth) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalAuth) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ExternalAuth) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ExternalAuth) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetPluginInfo returns the PluginInfo field value if set, zero value otherwise.
func (o *ExternalAuth) GetPluginInfo() map[string]interface{} {
	if o == nil || IsNil(o.PluginInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.PluginInfo
}

// GetPluginInfoOk returns a tuple with the PluginInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalAuth) GetPluginInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PluginInfo) {
		return map[string]interface{}{}, false
	}
	return o.PluginInfo, true
}

// HasPluginInfo returns a boolean if a field has been set.
func (o *ExternalAuth) HasPluginInfo() bool {
	if o != nil && !IsNil(o.PluginInfo) {
		return true
	}

	return false
}

// SetPluginInfo gets a reference to the given map[string]interface{} and assigns it to the PluginInfo field.
func (o *ExternalAuth) SetPluginInfo(v map[string]interface{}) {
	o.PluginInfo = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExternalAuth) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalAuth) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExternalAuth) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ExternalAuth) SetType(v string) {
	o.Type = &v
}

func (o ExternalAuth) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.PluginInfo) {
		toSerialize["plugin_info"] = o.PluginInfo
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableExternalAuth struct {
	value *ExternalAuth
	isSet bool
}

func (v NullableExternalAuth) Get() *ExternalAuth {
	return v.value
}

func (v *NullableExternalAuth) Set(val *ExternalAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalAuth(val *ExternalAuth) *NullableExternalAuth {
	return &NullableExternalAuth{value: val, isSet: true}
}

func (v NullableExternalAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

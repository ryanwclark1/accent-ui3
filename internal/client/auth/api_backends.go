/*
accent-auth

Accent's authentication service

API version: 0.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type BackendsAPI interface {

	/*
		DeleteLDAPBackendConfig Delete current tenant's LDAP backend configuration

		**Required ACL:** `auth.backends.ldap.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return BackendsAPIDeleteLDAPBackendConfigRequest
	*/
	DeleteLDAPBackendConfig(ctx context.Context) BackendsAPIDeleteLDAPBackendConfigRequest

	// DeleteLDAPBackendConfigExecute executes the request
	DeleteLDAPBackendConfigExecute(r BackendsAPIDeleteLDAPBackendConfigRequest) (*http.Response, error)

	/*
		GetBackends Get list of activated backends

		Retrieves the list of activated backends

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return BackendsAPIGetBackendsRequest
	*/
	GetBackends(ctx context.Context) BackendsAPIGetBackendsRequest

	// GetBackendsExecute executes the request
	//  @return BackendList
	GetBackendsExecute(r BackendsAPIGetBackendsRequest) (*BackendList, *http.Response, error)

	/*
		GetLDAPBackendConfig Get current tenant's LDAP backend configuration. If there is no configuration, all the fields will be `null`.

		**Required ACL:** `auth.backends.ldap.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return BackendsAPIGetLDAPBackendConfigRequest
	*/
	GetLDAPBackendConfig(ctx context.Context) BackendsAPIGetLDAPBackendConfigRequest

	// GetLDAPBackendConfigExecute executes the request
	//  @return LDAPBackendConfig
	GetLDAPBackendConfigExecute(r BackendsAPIGetLDAPBackendConfigRequest) (*LDAPBackendConfig, *http.Response, error)

	/*
		UpdateLDAPBackendConfig Update current tenant's LDAP backend configuration

		**Required ACL:** `auth.backends.ldap.update

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return BackendsAPIUpdateLDAPBackendConfigRequest
	*/
	UpdateLDAPBackendConfig(ctx context.Context) BackendsAPIUpdateLDAPBackendConfigRequest

	// UpdateLDAPBackendConfigExecute executes the request
	//  @return LDAPBackendConfig
	UpdateLDAPBackendConfigExecute(r BackendsAPIUpdateLDAPBackendConfigRequest) (*LDAPBackendConfig, *http.Response, error)
}

// BackendsAPIService BackendsAPI service
type BackendsAPIService service

type BackendsAPIDeleteLDAPBackendConfigRequest struct {
	ctx          context.Context
	ApiService   BackendsAPI
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r BackendsAPIDeleteLDAPBackendConfigRequest) AccentTenant(accentTenant string) BackendsAPIDeleteLDAPBackendConfigRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r BackendsAPIDeleteLDAPBackendConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLDAPBackendConfigExecute(r)
}

/*
DeleteLDAPBackendConfig Delete current tenant's LDAP backend configuration

**Required ACL:** `auth.backends.ldap.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BackendsAPIDeleteLDAPBackendConfigRequest
*/
func (a *BackendsAPIService) DeleteLDAPBackendConfig(ctx context.Context) BackendsAPIDeleteLDAPBackendConfigRequest {
	return BackendsAPIDeleteLDAPBackendConfigRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *BackendsAPIService) DeleteLDAPBackendConfigExecute(r BackendsAPIDeleteLDAPBackendConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackendsAPIService.DeleteLDAPBackendConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/backends/ldap"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BackendsAPIGetBackendsRequest struct {
	ctx        context.Context
	ApiService BackendsAPI
}

func (r BackendsAPIGetBackendsRequest) Execute() (*BackendList, *http.Response, error) {
	return r.ApiService.GetBackendsExecute(r)
}

/*
GetBackends Get list of activated backends

Retrieves the list of activated backends

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BackendsAPIGetBackendsRequest
*/
func (a *BackendsAPIService) GetBackends(ctx context.Context) BackendsAPIGetBackendsRequest {
	return BackendsAPIGetBackendsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BackendList
func (a *BackendsAPIService) GetBackendsExecute(r BackendsAPIGetBackendsRequest) (*BackendList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BackendList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackendsAPIService.GetBackends")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/backends"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BackendsAPIGetLDAPBackendConfigRequest struct {
	ctx          context.Context
	ApiService   BackendsAPI
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r BackendsAPIGetLDAPBackendConfigRequest) AccentTenant(accentTenant string) BackendsAPIGetLDAPBackendConfigRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r BackendsAPIGetLDAPBackendConfigRequest) Execute() (*LDAPBackendConfig, *http.Response, error) {
	return r.ApiService.GetLDAPBackendConfigExecute(r)
}

/*
GetLDAPBackendConfig Get current tenant's LDAP backend configuration. If there is no configuration, all the fields will be `null`.

**Required ACL:** `auth.backends.ldap.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BackendsAPIGetLDAPBackendConfigRequest
*/
func (a *BackendsAPIService) GetLDAPBackendConfig(ctx context.Context) BackendsAPIGetLDAPBackendConfigRequest {
	return BackendsAPIGetLDAPBackendConfigRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LDAPBackendConfig
func (a *BackendsAPIService) GetLDAPBackendConfigExecute(r BackendsAPIGetLDAPBackendConfigRequest) (*LDAPBackendConfig, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LDAPBackendConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackendsAPIService.GetLDAPBackendConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/backends/ldap"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BackendsAPIUpdateLDAPBackendConfigRequest struct {
	ctx          context.Context
	ApiService   BackendsAPI
	body         *LDAPBackendConfigEdit
	accentTenant *string
}

// The LDAP backend configuration
func (r BackendsAPIUpdateLDAPBackendConfigRequest) Body(body LDAPBackendConfigEdit) BackendsAPIUpdateLDAPBackendConfigRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r BackendsAPIUpdateLDAPBackendConfigRequest) AccentTenant(accentTenant string) BackendsAPIUpdateLDAPBackendConfigRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r BackendsAPIUpdateLDAPBackendConfigRequest) Execute() (*LDAPBackendConfig, *http.Response, error) {
	return r.ApiService.UpdateLDAPBackendConfigExecute(r)
}

/*
UpdateLDAPBackendConfig Update current tenant's LDAP backend configuration

**Required ACL:** `auth.backends.ldap.update

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BackendsAPIUpdateLDAPBackendConfigRequest
*/
func (a *BackendsAPIService) UpdateLDAPBackendConfig(ctx context.Context) BackendsAPIUpdateLDAPBackendConfigRequest {
	return BackendsAPIUpdateLDAPBackendConfigRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LDAPBackendConfig
func (a *BackendsAPIService) UpdateLDAPBackendConfigExecute(r BackendsAPIUpdateLDAPBackendConfigRequest) (*LDAPBackendConfig, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LDAPBackendConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackendsAPIService.UpdateLDAPBackendConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/backends/ldap"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

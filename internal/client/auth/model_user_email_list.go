/*
accent-auth

Accent's authentication service

API version: 0.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"encoding/json"
)

// checks if the UserEmailList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserEmailList{}

// UserEmailList struct for UserEmailList
type UserEmailList struct {
	Emails []UserEmailListEmailsInner `json:"emails,omitempty"`
}

// NewUserEmailList instantiates a new UserEmailList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserEmailList() *UserEmailList {
	this := UserEmailList{}
	return &this
}

// NewUserEmailListWithDefaults instantiates a new UserEmailList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserEmailListWithDefaults() *UserEmailList {
	this := UserEmailList{}
	return &this
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *UserEmailList) GetEmails() []UserEmailListEmailsInner {
	if o == nil || IsNil(o.Emails) {
		var ret []UserEmailListEmailsInner
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEmailList) GetEmailsOk() ([]UserEmailListEmailsInner, bool) {
	if o == nil || IsNil(o.Emails) {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *UserEmailList) HasEmails() bool {
	if o != nil && !IsNil(o.Emails) {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []UserEmailListEmailsInner and assigns it to the Emails field.
func (o *UserEmailList) SetEmails(v []UserEmailListEmailsInner) {
	o.Emails = v
}

func (o UserEmailList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserEmailList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Emails) {
		toSerialize["emails"] = o.Emails
	}
	return toSerialize, nil
}

type NullableUserEmailList struct {
	value *UserEmailList
	isSet bool
}

func (v NullableUserEmailList) Get() *UserEmailList {
	return v.value
}

func (v *NullableUserEmailList) Set(val *UserEmailList) {
	v.value = val
	v.isSet = true
}

func (v NullableUserEmailList) IsSet() bool {
	return v.isSet
}

func (v *NullableUserEmailList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserEmailList(val *UserEmailList) *NullableUserEmailList {
	return &NullableUserEmailList{value: val, isSet: true}
}

func (v NullableUserEmailList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserEmailList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
accent-auth

Accent's authentication service

API version: 0.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserEmailListEmailsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserEmailListEmailsInner{}

// UserEmailListEmailsInner struct for UserEmailListEmailsInner
type UserEmailListEmailsInner struct {
	Address *string `json:"address,omitempty"`
	Main    bool    `json:"main"`
}

type _UserEmailListEmailsInner UserEmailListEmailsInner

// NewUserEmailListEmailsInner instantiates a new UserEmailListEmailsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserEmailListEmailsInner(main bool) *UserEmailListEmailsInner {
	this := UserEmailListEmailsInner{}
	this.Main = main
	return &this
}

// NewUserEmailListEmailsInnerWithDefaults instantiates a new UserEmailListEmailsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserEmailListEmailsInnerWithDefaults() *UserEmailListEmailsInner {
	this := UserEmailListEmailsInner{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *UserEmailListEmailsInner) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEmailListEmailsInner) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *UserEmailListEmailsInner) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *UserEmailListEmailsInner) SetAddress(v string) {
	o.Address = &v
}

// GetMain returns the Main field value
func (o *UserEmailListEmailsInner) GetMain() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Main
}

// GetMainOk returns a tuple with the Main field value
// and a boolean to check if the value has been set.
func (o *UserEmailListEmailsInner) GetMainOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Main, true
}

// SetMain sets field value
func (o *UserEmailListEmailsInner) SetMain(v bool) {
	o.Main = v
}

func (o UserEmailListEmailsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserEmailListEmailsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	toSerialize["main"] = o.Main
	return toSerialize, nil
}

func (o *UserEmailListEmailsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"main",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserEmailListEmailsInner := _UserEmailListEmailsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserEmailListEmailsInner)

	if err != nil {
		return err
	}

	*o = UserEmailListEmailsInner(varUserEmailListEmailsInner)

	return err
}

type NullableUserEmailListEmailsInner struct {
	value *UserEmailListEmailsInner
	isSet bool
}

func (v NullableUserEmailListEmailsInner) Get() *UserEmailListEmailsInner {
	return v.value
}

func (v *NullableUserEmailListEmailsInner) Set(val *UserEmailListEmailsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUserEmailListEmailsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUserEmailListEmailsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserEmailListEmailsInner(val *UserEmailListEmailsInner) *NullableUserEmailListEmailsInner {
	return &NullableUserEmailListEmailsInner{value: val, isSet: true}
}

func (v NullableUserEmailListEmailsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserEmailListEmailsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
